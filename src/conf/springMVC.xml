<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!-- 注解扫描 -->
    <context:component-scan base-package="com.jh.*"/>
    <!-- 支持注解驱动 -->
    <!--   <mvc:annotation-driven/>-->
    <!--	<mvc:annotation-driven >
            <mvc:message-converters>
          <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
          <bean class="org.springframework.http.converter.StringHttpMessageConverter">
           <property name="supportedMediaTypes">
            <list>
             <value>text/plain;charset=utf-8</value>
             <value>text/html;charset=UTF-8</value>
            </list>
           </property>
          </bean>
         </mvc:message-converters>
          </mvc:annotation-driven>-->

    <!-- 支持静态资源的配置 handlerAdapter -->
    <mvc:annotation-driven>
       <!-- 自定义返回处理器-->
    <mvc:return-value-handlers>
        <bean class="com.jh.common.config.ReturnHandler"/>
    </mvc:return-value-handlers>
      <!--  自定义参数解析器-->
    <mvc:argument-resolvers>
        <bean class="com.jh.common.FindResolver"/>
    </mvc:argument-resolvers>
        <!--  解决@ResponseBody 返回对象转换成json 以及乱码问题-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=utf-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <mvc:default-servlet-handler/>
    <!--
       <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
            <property name="customArgumentResolvers">
                <list>
                    <bean class="com.jh.common.FindResolver"/>
                </list>
            </property>
            <property name="order" value="0"/>
        </bean>
    -->

    <!--配置视图解析器 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <!-- 自定义参数解析器 -->


    <!--全局异常处理 <bean id="ExceptionInterceptor" class="com.axp.interceptor.ExceptionInterceptor"></bean> -->

    <!-- 上传解析器 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 设置上传文件的最大尺寸为1MB -->
        <property name="maxUploadSize">
            <value>52428800</value>
        </property>
    </bean>

    <mvc:interceptors>
        <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->
        <bean class="com.jh.common.InserValueInterceptor"/>
        <mvc:interceptor>
            <mvc:mapping path="/*"/>
            <!-- 定义在mvc:interceptor下面的表示是对特定的请求才进行拦截的 -->
            <bean class="com.jh.common.initvalue"/>
        </mvc:interceptor>
    </mvc:interceptors>

    <!-- 引入其他xml -->
    <!-- <import resource="application.xml" /> -->


    <!-- 开启openSessionInView -->
    <mvc:interceptors>
        <bean
                class="org.springframework.orm.hibernate4.support.OpenSessionInViewInterceptor">
            <property name="sessionFactory" ref="sessionFactory"/>
        </bean>
    </mvc:interceptors>

</beans>
